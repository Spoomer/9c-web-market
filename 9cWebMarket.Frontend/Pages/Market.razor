@page "/Market"
@using Microsoft.AspNetCore.Components.WebAssembly.Hosting
@using NineCWebMarket.Frontend.Models.Extensions
@using NineCWebMarket.Frontend.Services.Interfaces
@using ItemSubType = NineCWebMarket.Frontend.ItemSubType
@using SortDirection = NineCWebMarket.Frontend.SortDirection
@inject IItemNameService ItemNameService
@inject IWebAssemblyHostEnvironment HostEnvironment
@inject IJSRuntime JsRuntime

<h3>Mimir Market</h3>
<div class="container">
    @foreach (var itemSubType in Enum.GetValues<ItemSubType>())
    {
        <button class="btn badge bg-primary m-1" @onclick="() => Refresh(itemSubType)">@itemSubType</button>
    }
</div>
<div class="container">
    @foreach (var productSortBy in Enum.GetValues<ProductSortBy>())
    {
        <button class="btn badge bg-primary m-1" @onclick="() => Refresh(productSortBy)">
            @productSortBy
            @if(_sortBy == productSortBy)
            {
                @if (_sortDirection == SortDirection.Ascending)
                {
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-caret-up-fill" viewBox="0 0 16 16">
                        <path d="m7.247 4.86-4.796 5.481c-.566.647-.106 1.659.753 1.659h9.592a1 1 0 0 0 .753-1.659l-4.796-5.48a1 1 0 0 0-1.506 0z"/>
                    </svg>
                }
                else
                {
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-caret-down-fill" viewBox="0 0 16 16">
                        <path d="M7.247 11.14 2.451 5.658C1.885 5.013 2.345 4 3.204 4h9.592a1 1 0 0 1 .753 1.659l-4.796 5.48a1 1 0 0 1-1.506 0z"/>
                    </svg>
                }
            }
        </button>
    }
</div>
@if ((int)_subtype >= 6 && (int)_subtype <= 10)
{
    <UseGetItemProducts Context="results" Strategy="ExecutionStrategy.CacheFirst" Skip="_skip" Take="_take" ItemSubType="_subtype" SortBy="_sortBy" SortDirection="_sortDirection">
        <ChildContent>
            @if (results.Products?.Items is not null)
            {
                @foreach (var obj in results.Products.Items)
                {
                    if (obj is null || obj.Object is not IGetItemProducts_Products_Items_Object_ItemProduct context)
                    {
                        continue;
                    }

                    <div class="d-flex mb-2 border-bottom" style="height: @(_elementHeight)px">
                        <ItemPicture ItemPictureProperties="@context.TradableItem?.ToItemPictureProperties()" Class="me-3"></ItemPicture>
                        <div class="d-flex flex-column">
                            <div class="d-flex mb-2">
                                <a href="/itemdetails/@(context.TradableItem?.Id)" class="me-3">@GetItemName(context)</a>
                                <PriceDisplayWithUnitPrice Price="context.Price.Quantity.ToInt()" UnitPrice="obj.UnitPrice ?? 0" Class="me-3"/>
                            </div>
                            <div class="d-flex flex-column flex-sm-column flex-md-row mb-2 flex-wrap">
                                <div id="combatPoints" class="me-3 d-flex">
                                    <span class="me-1">@obj.CombatPoint CP</span>
                                    @if (obj is { CombatPoint: > 0 })
                                    {
                                        <div>(~@(obj.CombatPoint / context.Price.Quantity.ToInt(1)) CP/<img alt="Gold" src="@(HostEnvironment.BaseAddress)icons/FungibleAssetValue/NCG.png" style="width: 16px;"/>)</div>
                                    }
                                </div>
                                <div id="crystals" class="me-3 d-flex">
                                    <span class="me-1">
                                        @obj.Crystal <img alt="Crystal" src="@(HostEnvironment.BaseAddress)icons/FungibleAssetValue/CRYSTAL.png" style="width: 16px;"/>
                                    </span>
                                    @if (obj is { Crystal: > 0 })
                                    {
                                        <div>(@obj.CrystalPerPrice <img alt="Crystal" src="@(HostEnvironment.BaseAddress)icons/FungibleAssetValue/CRYSTAL.png" style="width: 16px;"/>/<img alt="NCG" src="@(HostEnvironment.BaseAddress)icons/FungibleAssetValue/NCG.png" style="width: 16px;"/>)</div>
                                    }
                                </div>

                                @if (!string.IsNullOrEmpty(context.SellerAgentAddress))
                                {
                                    <div class="me-3" id="seller">
                                        <b>Seller:</b> @("0x" + context.SellerAgentAddress[..6])
                                    </div>
                                }
                            </div>

                        </div>

                    </div>
                }
            }
        </ChildContent>
        <LoadingContent>
            <div class="d-flex mb-2" style="height: @(_elementHeight)px">
                <svg height="58" width="58" class="placeholder-glow me-3">
                    <rect width="100%" height="100%" fill="grey"></rect>
                </svg>
                <div class="flex-column">
                    <div class="d-flex mb-2 placeholder-glow">
                        <span class="placeholder me-3" style="width: 100px"></span>
                        <span class="placeholder me-3" style="width: 50px"></span>

                    </div>
                    <div class="d-flex placeholder-glow">
                        <span class="placeholder me-3" style="width: 100px"></span>
                        <span class="placeholder me-3" style="width: 100px"></span>
                    </div>
                </div>
            </div>
        </LoadingContent>
    </UseGetItemProducts>
}
else
{
    <p>This item type isn't implemented yet..</p>
}

@code {
    private ItemSubType _subtype = ItemSubType.Armor;
    private int _take = 10;
    private int _skip = 0;
    private ProductSortBy _sortBy;
    private SortDirection _sortDirection = SortDirection.Ascending;

    private const float LargeDisplayElementHeight = 64f;
    private const float MediumDisplayElementHeight = 128f;
    private const float SmallDisplayElementHeight = 160f;
    private float _elementHeight = LargeDisplayElementHeight;
    
    public override async Task SetParametersAsync(ParameterView parameters)
    {
        parameters.SetParameterProperties(this);
        await InitAsync();
        await base.SetParametersAsync(ParameterView.Empty);
    }
    
    [JSInvokable]
    public void OnResize(int width, int height)
    {
        switch (width)
        {
            case < 768:
                _elementHeight = SmallDisplayElementHeight;
                break;
            case < 992:
                _elementHeight = MediumDisplayElementHeight;
                break;
            default:
                _elementHeight = LargeDisplayElementHeight;
                break;
        }

        StateHasChanged();
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JsRuntime.InvokeVoidAsync("window.helper.withContext.registerViewportChangeCallback", DotNetObjectReference.Create(this));
        }
    }
    
    private async Task InitAsync()
    {
        await ItemNameService.InitAsync();
    }
    
    private string? GetItemName(IGetItemProducts_Products_Items_Object_ItemProduct itemProduct)
    {
        if (itemProduct.TradableItem is null) return null;
        return ItemNameService.GetValueOrDefault(itemProduct.TradableItem.Id);
    } 
    
    private void Refresh(ItemSubType itemSubType)
    {
        _subtype = itemSubType;
        StateHasChanged();
    }
    private void Refresh(ProductSortBy productSortBy)
    {
        if (_sortBy == productSortBy)
        {
            _sortDirection = _sortDirection == SortDirection.Ascending ? SortDirection.Descending : SortDirection.Ascending;
        }
        else
        {
            _sortBy = productSortBy;
            _sortDirection = SortDirection.Ascending;
        }
        StateHasChanged();
    }
}