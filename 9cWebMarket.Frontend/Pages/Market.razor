@page "/Market"
@using GraphQL.Client.Abstractions.Utilities
@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.Extensions.Primitives
@using Nekoyume.Model.Item
@using NineCWebMarket.Frontend.Api
@using NineCWebMarket.Frontend.Services
@inject NavigationManager NavigationManager
@inject IApiClient ApiClient
@inject IEnumerable<IMarketService> MarketServices

<div class="container" style="scroll-behavior: smooth">
    <div class="input-group mb-3" style="min-width: 200px; height: 25%">
        <label class="input-group-text" for="planet-select">MarketService</label>
        <select class="form-select" id="endpoint-select" @onchange="OnEndpointSelectChange">
            @foreach (var service in _marketServices.Keys)
            {
                <option value="@service" selected="@(service == SelectedMarketService)">@service</option>
            }
        </select>
    </div>
    <div class="input-group mb-3" style="min-width: 200px; height: 25%">
        <label class="input-group-text" for="planet-select">Planet</label>
        <select class="form-select" id="planet-select" @onchange="OnPlanetSelectChange">
            @foreach (var planet in _planets)
            {
                <option value="@planet" selected="@(planet == SelectedPlanet)">@planet.Capitalize()</option>
            }
        </select>
    </div>
    <h3>@SelectedPlanet.Capitalize() Market from @SelectedMarketService.Capitalize()</h3>
    <div id="header" class="d-flex justify-content-evenly">

        <div id="categories" class="pt-3 pb-2 container bg-body-secondary me-2 rounded-2 flex-grow-1">
            <h4>Category</h4>
            @for (int i = 6; i <= 10; i++)
            {
                var itemSubType = (ItemSubType) i;
                var buttonColor = itemSubType == _subtype ? "btn-primary" : "btn-secondary";
                <button class="btn badge @buttonColor m-1" @onclick="_ => Refresh(itemSubType)">@itemSubType</button>
            }
        </div>
        <div id="sorting" class="pt-3 pb-2 container bg-body-secondary me-2 rounded-2 flex-grow-1">
            <h4>Sorting</h4>
            @foreach (var productSortBy in Enum.GetValues<ProductSortBy>())
            {
                var buttonColor = productSortBy == _sortBy ? "btn-primary" : "btn-secondary";

                <button class="btn badge @buttonColor m-1" @onclick="_ => Refresh(productSortBy)">
                    @productSortBy
                    @if (_sortBy == productSortBy)
                    {
                        @if (_sortDirection == SortDirection.ASCENDING)
                        {
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor"
                                 class="bi bi-caret-up-fill" viewBox="0 0 16 16">
                                <path
                                    d="m7.247 4.86-4.796 5.481c-.566.647-.106 1.659.753 1.659h9.592a1 1 0 0 0 .753-1.659l-4.796-5.48a1 1 0 0 0-1.506 0z"/>
                            </svg>
                        }
                        else
                        {
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor"
                                 class="bi bi-caret-down-fill" viewBox="0 0 16 16">
                                <path
                                    d="M7.247 11.14 2.451 5.658C1.885 5.013 2.345 4 3.204 4h9.592a1 1 0 0 1 .753 1.659l-4.796 5.48a1 1 0 0 1-1.506 0z"/>
                            </svg>
                        }
                    }
                </button>
            }
        </div>
    </div>

</div>
<MarketList Planet="@SelectedPlanet" SubType="_subtype" SortBy="_sortBy" SortDirection="_sortDirection" @bind-Loading="@_loading"
            MarketService="_marketServices[SelectedMarketService]"/>
@code {
    private ItemSubType _subtype = ItemSubType.Weapon;
    private ProductSortBy _sortBy = ProductSortBy.CP;
    private SortDirection _sortDirection = SortDirection.DESCENDING;
    private IReadOnlyCollection<string> _planets = [];
    private bool _loading;
    private Dictionary<string, IMarketService> _marketServices = new();
    private const string PlanetQueryKey = "planet";
    private const string MarketServiceQueryKey = "marketService";
    private const string DefaultPlanet = "heimdall";
    private const string DefaultMarketService = "9CAPI";
    [SupplyParameterFromQuery(Name = PlanetQueryKey)]
    public string SelectedPlanet { get; set; } = DefaultPlanet;

    [SupplyParameterFromQuery(Name = MarketServiceQueryKey)]
    public string SelectedMarketService { get; set; } = DefaultMarketService;

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        parameters.SetParameterProperties(this);
        await InitAsync();
        await base.SetParametersAsync(ParameterView.Empty);
    }

    private async Task InitAsync()
    {
        if (_planets.Count != 0)
        {
            return;
        }

        _planets = await ApiClient.GetPlanetsNamesAsync();
        //no thor support
        _planets = _planets.Where(x => x != "thor").ToArray();
        _marketServices = MarketServices.ToDictionary(x => x.Name);
        
        ValidateQuery();
    }

    private void ValidateQuery()
    {
        if (string.IsNullOrWhiteSpace(SelectedPlanet) || !_planets.Contains(SelectedPlanet)) SelectedPlanet = DefaultPlanet;
        if (string.IsNullOrWhiteSpace(SelectedMarketService) ||!_marketServices.ContainsKey(SelectedMarketService)) SelectedMarketService = DefaultMarketService;
    }

    private bool SetPlanet(string planet)
    {
        if (!_planets.Contains(planet)) return false;

        SelectedPlanet = planet;
        return true;
    }
    
    private void OnEndpointSelectChange(ChangeEventArgs e)
    {
        if (e.Value is string serviceName)
        {
            ChangeMarketService(serviceName);
        }
    }

    private void ChangeMarketService(string service)
    {
        SetMarketService(service);
        _loading = true;
        NavigateToNewUrl();
    }

    private void NavigateToNewUrl()
    {
        var uriBuilder = new UriBuilder(NavigationManager.Uri);
        var query = QueryHelpers.ParseNullableQuery(uriBuilder.Query);
        query ??= new Dictionary<string, StringValues>();
        query[PlanetQueryKey] = SelectedPlanet;
        query[MarketServiceQueryKey] = SelectedMarketService;
        uriBuilder.Query = string.Empty; 

        var newUrl = QueryHelpers.AddQueryString(uriBuilder.Uri.AbsoluteUri, query);
        
        NavigationManager.NavigateTo(newUrl);
    }

    private bool SetMarketService(string service)
    {
        if (!_marketServices.ContainsKey(service)) return false;
        SelectedMarketService = service;
        return true;
    }
    
    private void OnPlanetSelectChange(ChangeEventArgs e)
    {
        if (e.Value is string planet)
        {
            ChangePlanet(planet);
        }
    }
    
    private void ChangePlanet(string planet)
    {
        SetPlanet(planet);
        _loading = true;
        NavigateToNewUrl();
    }

    private void Refresh(ItemSubType itemSubType)
    {
        _subtype = itemSubType;
        _loading = true;
        NavigationManager.NavigateTo(NavigationManager.Uri);
    }

    private void Refresh(ProductSortBy productSortBy)
    {
        if (_sortBy == productSortBy)
        {
            _sortDirection = _sortDirection == SortDirection.ASCENDING ? SortDirection.DESCENDING : SortDirection.ASCENDING;
        }
        else
        {
            _sortBy = productSortBy;
            _sortDirection = SortDirection.DESCENDING;
        }
        _loading = true;
        NavigationManager.NavigateTo(NavigationManager.Uri);
    }

}