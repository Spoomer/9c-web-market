@page "/MarketHistory"
@using Microsoft.AspNetCore.Components.WebAssembly.Hosting
@using NineCWebMarket.Frontend.Api
@using NineCWebMarket.Frontend.Models.Api
@using NineCWebMarket.Frontend.Models.Extensions
@using NineCWebMarket.Frontend.Services
@using NineCWebMarket.Frontend.Services.Interfaces
@inject IApiClient ApiClient
@inject IItemNameService ItemNameService
@inject NavigationManager NavigationManager
@inject IWebAssemblyHostEnvironment HostEnvironment
@inject BrowserService BrowserService
@inject IJSRuntime JsRuntime
@implements IAsyncDisposable
<h3>Market History</h3>
<div class="input-group mb-3" style="min-width: 200px; height: 25%">
    <label class="input-group-text" for="planet-select">Planet</label>
    <select class="form-select" id="planet-select" @onchange="OnPlanetSelectChange">
        @foreach (var planet in _planets)
        {
            <option value="@planet" selected="@(planet == _selectedPlanet)">@planet</option>
        }
    </select>
</div>
<div>
    @if (_firstItemLoadNotFinished)
    {
        <div class="d-flex mb-2" style="height: @(_elementHeight)px">
            <svg height="58" width="58" class="placeholder-glow me-3">
                <rect width="100%" height="100%" fill="grey"></rect>
            </svg>
            <div class="flex-column">
                <div class="d-flex mb-2 placeholder-glow">
                    <span class="placeholder me-3" style="width: 100px"></span>
                    <span class="placeholder me-3" style="width: 50px"></span>

                </div>
                <div class="d-flex placeholder-glow">
                    <span class="placeholder me-3" style="width: 100px"></span>
                    <span class="placeholder me-3" style="width: 100px"></span>
                </div>
            </div>
        </div>
    }
    <Virtualize ItemsProvider="ItemsProvider" ItemSize="_elementHeight" @ref="_virtualizeComponent">
        <ItemContent>
            <div class="d-flex mb-2 border-bottom" style="height: @(_elementHeight)px">
                <ItemPicture ItemPictureProperties="@context.ToItemPictureProperties()" Class="me-3"></ItemPicture>
                <div class="d-flex flex-column">
                    <div class="d-flex mb-2">
                        <a href="/itemdetails/@(context.ItemId is null ? context.Ticker : context.ItemId)" class="me-3">@GetItemName(context)</a>
                        <PriceDisplayWithUnitPrice Price="context.TradeItem.Price" UnitPrice="context.TradeItem.UnitPrice" Class="me-3"/>
                    </div>
                    <div class="d-flex flex-column flex-sm-column flex-md-row mb-2 flex-wrap">
                        <div id="combatPoints" class="me-3 d-flex">
                            <span class="me-1">@(context.TradeItem.CombatPoint ?? 0) CP</span>
                            @if (context.TradeItem is { Price: > 1, CombatPoint: > 0 })
                            {
                                <div>(~@(Math.Round(context.TradeItem.CombatPoint.Value / (decimal)context.TradeItem.Price)) CP/<img alt="Gold" src="@(HostEnvironment.BaseAddress)icons/FungibleAssetValue/NCG.png" style="width: 16px;"/>)</div>
                            }
                        </div>
                        <div id="crystals" class="me-3 d-flex">
                            <span class="me-1">
                                @(context.TradeItem.Crystal ?? 0) <img alt="Crystal" src="@(HostEnvironment.BaseAddress)icons/FungibleAssetValue/CRYSTAL.png" style="width: 16px;"/>
                            </span>
                            @if (context.TradeItem is { Price: > 1, Crystal: > 0 })
                            {
                                <div>(@context.TradeItem.CrystalPerPrice <img alt="Crystal" src="@(HostEnvironment.BaseAddress)icons/FungibleAssetValue/CRYSTAL.png" style="width: 16px;"/>/<img alt="NCG" src="@(HostEnvironment.BaseAddress)icons/FungibleAssetValue/NCG.png" style="width: 16px;"/>)</div>
                            }
                        </div>

                        @if (!string.IsNullOrEmpty(context.From))
                        {
                            <div class="me-3" id="seller">
                                <b>Seller:</b> @("0x" + context.From[..6])
                            </div>
                        }
                        @if (!string.IsNullOrEmpty(context.To))
                        {
                            <div class="me-3" id="seller">
                                <b>Buyer:</b> @("0x" + context.To[..6])
                            </div>
                        }

                        <div id="blocktime">
                            <Clock Class="me-1"/><span style="text-align: center">@context.BlockTime</span>
                        </div>
                    </div>

                </div>

            </div>
        </ItemContent>
        <Placeholder>
            <div class="d-flex mb-2" style="height: @(_elementHeight)px">
                <svg height="58" width="58" class="placeholder-glow me-3">
                    <rect width="100%" height="100%" fill="grey"></rect>
                </svg>
                <div class="flex-column">
                    <div class="d-flex mb-2 placeholder-glow">
                        <span class="placeholder me-3" style="width: 100px"></span>
                        <span class="placeholder me-3" style="width: 50px"></span>

                    </div>
                    <div class="d-flex placeholder-glow">
                        <span class="placeholder me-3" style="width: 100px"></span>
                        <span class="placeholder me-3" style="width: 100px"></span>
                    </div>
                </div>
            </div>
        </Placeholder>
    </Virtualize>
</div>

@code {

    private static readonly ItemsProviderResult<MarketTransaction> EmptyResult = new([], 0);

    private string? _selectedPlanet;
    private Virtualize<MarketTransaction>? _virtualizeComponent;
    private readonly SemaphoreSlim _semaphoreSlim = new(1, 1);
    private IReadOnlyCollection<string> _planets = [];
    private Dictionary<string, List<MarketTransaction>> _itemsPerPlanet = [];
    private const int MaxRowCount = 1000;
    private Dictionary<string, string?> _lastIndex = new();
    private bool _firstItemLoadNotFinished = true;
    private bool _isMobile = false;
    private const float LargeDisplayElementHeight = 64f;
    private const float MediumDisplayElementHeight = 128f;
    private const float SmallDisplayElementHeight = 160f;
    private float _elementHeight = LargeDisplayElementHeight;
    
    public override async Task SetParametersAsync(ParameterView parameters)
    {
        parameters.SetParameterProperties(this);
        _isMobile = await BrowserService.IsMobileWidthAsync();
        if (_isMobile)
        {
            _elementHeight = SmallDisplayElementHeight;
        }
        await InitAsync();
        await base.SetParametersAsync(ParameterView.Empty);
        
    }
    
    [JSInvokable]
    public void OnResize(int width, int height)
    {
        switch (width)
        {
            case < 768:
                _elementHeight = SmallDisplayElementHeight;
                break;
            case < 992:
                _elementHeight = MediumDisplayElementHeight;
                break;
            default:
                _elementHeight = LargeDisplayElementHeight;
                break;
        }

        StateHasChanged();
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JsRuntime.InvokeVoidAsync("window.helper.withContext.registerViewportChangeCallback", DotNetObjectReference.Create(this));
        }
    }


    private async Task InitAsync()
    {
        if (_planets.Count != 0)
        {
            return;
        }

        _planets = await ApiClient.GetPlanetsNamesAsync();
        if (!SetSelectedPlanetFromUrl())
        {
            _selectedPlanet ??= _planets.FirstOrDefault();
        }

        await ItemNameService.InitAsync();
    }

    private async ValueTask<ItemsProviderResult<MarketTransaction>> ItemsProvider(ItemsProviderRequest req)
    {
        if (_selectedPlanet is null || req.Count == 0)
        {
            return EmptyResult;
        }

        if (!_itemsPerPlanet.TryGetValue(_selectedPlanet, out var items))
        {
            items = [];
            _itemsPerPlanet[_selectedPlanet] = items;
        }

        int maxCount = req.StartIndex + req.Count;
        if (items.Count > maxCount)
        {
            return new ItemsProviderResult<MarketTransaction>(items.Slice(req.StartIndex, req.Count), items.Count);
        }

        await _semaphoreSlim.WaitAsync();
        try
        {
            if (items.Count > maxCount)
            {
                return new ItemsProviderResult<MarketTransaction>(items.Slice(req.StartIndex, req.Count), items.Count);
            }

            return await GetNewItems(req, maxCount + 1, items);
        }
        finally
        {
            _firstItemLoadNotFinished = false;
            await InvokeAsync(StateHasChanged);
            _semaphoreSlim.Release();
        }
    }

    private async Task<ItemsProviderResult<MarketTransaction>> GetNewItems(ItemsProviderRequest req, int maxCount, List<MarketTransaction> items)
    {
        if (_selectedPlanet is null || req.Count == 0)
        {
            return EmptyResult;
        }

        _lastIndex.TryGetValue(_selectedPlanet, out var lastIndex);
        while (maxCount > items.Count)
        {
            var result = await ApiClient.GetMarketHistoryAsync(_selectedPlanet, lastIndex);
            if (result is null || result.Transactions.Count == 0)
            {
                if (req.StartIndex < items.Count)
                {
                    return new ItemsProviderResult<MarketTransaction>(items[req.StartIndex..], items.Count);
                }

                return EmptyResult;
            }

            items.AddRange(result.Transactions);
            lastIndex = result.Before;
            _lastIndex[_selectedPlanet] = lastIndex;
        }

        return new ItemsProviderResult<MarketTransaction>(items.Slice(req.StartIndex, req.Count), items.Count);
    }

    private async Task OnPlanetSelectChange(ChangeEventArgs e)
    {
        if (e.Value is string planet)
        {
            await ChangePlanetAsync(planet);
        }
    }

    private async Task ChangePlanetAsync(string planet)
    {
        NavigationManager.NavigateTo(NavigationManager.Uri+$"#{planet}");
        SetPlanet(planet);
        if (_virtualizeComponent is not null)
        {
            await _virtualizeComponent.RefreshDataAsync();
            StateHasChanged();
        }
    }

    private bool SetSelectedPlanetFromUrl()
    {
        var uri = new Uri(NavigationManager.Uri, UriKind.Absolute);

        if (!uri.Fragment.StartsWith('#')) return false;

        var planetFromFragment = uri.Fragment[1..];

        return SetPlanet(planetFromFragment);
    }

    private bool SetPlanet(string planet)
    {
        if (!_planets.Contains(planet)) return false;

        _selectedPlanet = planet;
        return true;
    }

    private string? GetItemName(MarketTransaction marketTransaction)
    {
        if (marketTransaction.ItemId is null)
        {
            return marketTransaction.Ticker;
        }

        return ItemNameService.GetValueOrDefault(marketTransaction.ItemId.Value);
    }

    public async ValueTask DisposeAsync()
    {
        await JsRuntime.InvokeVoidAsync("window.helper.withContext.removeViewportChangeCallback", DotNetObjectReference.Create(this));
        _semaphoreSlim.Dispose();
    }

}