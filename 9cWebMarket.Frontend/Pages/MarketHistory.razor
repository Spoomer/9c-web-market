@page "/MarketHistory"
@using NineCWebMarket.Frontend.Api
@using NineCWebMarket.Frontend.Models.Api
@using NineCWebMarket.Frontend.Models.Extensions
@using NineCWebMarket.Frontend.Services.Interfaces
@inject IApiClient ApiClient
@inject IItemNameService ItemNameService
@inject NavigationManager NavigationManager

<h3>MarketHistory</h3>
<div class="input-group mb-3 w-50">
    <label class="input-group-text" for="planet-select">Planet</label>
    <select class="form-select" id="planet-select" @onchange="OnPlanetSelectChange">
        @foreach (var planet in _planets)
        {
            <option value="@planet" selected="@(planet == SelectedPlanet)">@planet</option>
        }
    </select>
</div>

<div class="grid" tabindex="-1">
    <QuickGrid Virtualize="true" ItemsProvider="_itemsProvider" ItemSize="79.19f" @ref="_grid">
        <TemplateColumn>
            <ItemPicture ItemPictureProperties="@context.ToItemPictureProperties()"></ItemPicture>
        </TemplateColumn>
        <TemplateColumn Title="ItemId">
            <a href="/itemdetails/@context.ItemId">@context.ItemId</a>
        </TemplateColumn>
        <TemplateColumn Title="Item Name">
            @if (context.ItemId is not null)
            {
                <a href="/itemdetails/@context.ItemId">@GetItemName(context)</a>
            }
            else if (context.Ticker is not null)
            {
                <a href="/itemdetails/@context.Ticker">@GetItemName(context)</a>
            }
        </TemplateColumn>
        <PropertyColumn Property="x => x.TradeItem.ItemId" Sortable="true"></PropertyColumn>
        <PropertyColumn Property="x => x.TradeItem.CombatPoint" Sortable="true" Format="0,0.000"></PropertyColumn>
        <PropertyColumn Property="x => x.TradeItem.Crystal" Sortable="true" Format="0,0.000"></PropertyColumn>
        <PropertyColumn Property="x => x.TradeItem.CrystalPerPrice" Sortable="true" Format="0,0.000"></PropertyColumn>
        <TemplateColumn Title="Price" SortBy="@_priceSort" InitialSortDirection="SortDirection.Ascending">
            <PriceDisplayWithUnitPrice Price="context.TradeItem.Price" UnitPrice="context.TradeItem.UnitPrice"/>
        </TemplateColumn>
        <PropertyColumn Property="x => x.BlockTime" Sortable="true" IsDefaultSortColumn="true" InitialSortDirection="SortDirection.Descending"></PropertyColumn>
        <TemplateColumn Sortable="true" Title="From">
            @if (!string.IsNullOrEmpty(context.From))
            {
                @("0x" + context.From[..6])
            }
        </TemplateColumn>
        <TemplateColumn Sortable="true" Title="To">
            @if (!string.IsNullOrEmpty(context.To))
            {
                @("0x" + context.To[..6])
            }
        </TemplateColumn>
    </QuickGrid>
</div>
@code {

    private static readonly GridItemsProviderResult<MarketTransaction> EmptyResult = new() { Items = [], TotalItemCount = MaxRowCount };

    [Parameter] public string? SelectedPlanet { get; set; }

    QuickGrid<MarketTransaction>? _grid;
    private readonly GridSort<MarketTransaction> _priceSort = GridSort<MarketTransaction>.ByAscending(x => x.TradeItem.Price);
    private IReadOnlyCollection<string> _planets = [];
    private Dictionary<string, List<MarketTransaction>> _itemsPerPlanet = [];
    private GridItemsProvider<MarketTransaction>? _itemsProvider;
    private const int MaxRowCount = 1000;
    private Dictionary<string, string?> _lastIndex = new();

    protected override async Task OnInitializedAsync()
    {
        _planets = await ApiClient.GetPlanetsNamesAsync();
        if (!SetSelectedPlanetFromUrl())
        {
            SelectedPlanet ??= _planets.FirstOrDefault();
        }

        await ItemNameService.InitAsync();
        _itemsProvider = ItemsProvider;
    }

    private async ValueTask<GridItemsProviderResult<MarketTransaction>> ItemsProvider(GridItemsProviderRequest<MarketTransaction> req)
    {
        if (SelectedPlanet is null || req.Count is null || req.Count == 0)
        {
            return EmptyResult;
        }

        if (!_itemsPerPlanet.TryGetValue(SelectedPlanet, out var items))
        {
            items = [];
            _itemsPerPlanet[SelectedPlanet] = items;
        }

        int maxCount = req.StartIndex + req.Count.Value;
        if (items.Count >= maxCount)
        {
            return new GridItemsProviderResult<MarketTransaction>() { Items = items.Slice(req.StartIndex, req.Count.Value), TotalItemCount = MaxRowCount};
        }

        _lastIndex.TryGetValue(SelectedPlanet, out var lastIndex);
        while (maxCount > items.Count)
        {
            var result = await ApiClient.GetMarketHistoryAsync(SelectedPlanet, lastIndex);
            if (result is null || result.Transactions.Count == 0)
            {
                if (req.StartIndex < items.Count)
                {
                    return new GridItemsProviderResult<MarketTransaction>() { Items = items[req.StartIndex..], TotalItemCount = MaxRowCount};
                }

                return EmptyResult;
            }
            items.AddRange(result.Transactions);
            lastIndex = result.Before;
            _lastIndex[SelectedPlanet] = lastIndex;
        }
        
        return new GridItemsProviderResult<MarketTransaction> { Items = items.Slice(req.StartIndex, req.Count.Value), TotalItemCount = MaxRowCount};
    }

    private async Task OnPlanetSelectChange(ChangeEventArgs e)
    {
        if (e.Value is string planet)
        {
            await ChangePlanetAsync(planet);
        }
    }

    private async Task ChangePlanetAsync(string planet)
    {
        NavigationManager.NavigateTo($"#{planet}");
        SetPlanet(planet);
        if (_grid is not null)
        {
            await _grid.RefreshDataAsync();
        }
    }

    private bool SetSelectedPlanetFromUrl()
    {
        var uri = new Uri(NavigationManager.Uri, UriKind.Absolute);

        if (!uri.Fragment.StartsWith('#')) return false;

        var planetFromFragment = uri.Fragment[1..];

        return SetPlanet(planetFromFragment);
    }

    private bool SetPlanet(string planet)
    {
        if (!_planets.Contains(planet)) return false;

        SelectedPlanet = planet;
        return true;
    }

    private string? GetItemName(MarketTransaction marketTransaction)
    {
        if (marketTransaction.ItemId is null)
        {
            return marketTransaction.Ticker;
        }

        return ItemNameService.GetValueOrDefault(marketTransaction.ItemId.Value);
    }

}