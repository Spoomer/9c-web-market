@using Microsoft.AspNetCore.Components.WebAssembly.Hosting
@using Nekoyume.Model.Item
@using NineCWebMarket.Frontend.Api
@using NineCWebMarket.Frontend.Models.Extensions
@using NineCWebMarket.Frontend.Models.Mimir
@using NineCWebMarket.Frontend.Services
@using NineCWebMarket.Frontend.Services.Interfaces
@inject IItemNameService ItemNameService
@inject IWebAssemblyHostEnvironment HostEnvironment
@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager

<div id="list" class="mt-4">
    @if ((int) SubType >= 6 && (int) SubType <= 10)
    {
        if (Loading)
        {
            <LoadingEntries/>
        }
        else
        {
            @if (_itemProducts is not null)
            {
                <div class="row row-cols-1 row-cols-md-2 row-cols-xl-3 g-2 ">
                    @foreach (var item in _itemProducts)
                    {
                        <div class="col d-flex mb-2 border border-1 rounded">
                            <ItemPicture
                                ItemPictureProperties="@item.Object.Equipment.ToItemPictureProperties()"
                                Class="me-3"></ItemPicture>
                            <div class="d-flex flex-column flex-grow-1">
                                <div class="d-flex mb-2">
                                    <span class="me-3 fw-bold">@GetItemName(item)</span>
                                    <PriceDisplayWithUnitPrice Price="item.Object.Price.Quantity.ToInt()"
                                                               UnitPrice="item.UnitPrice ?? 0M" Class="me-3"/>
                                </div>
                                <div id="product-information-@item.Object.ProductId"
                                     class="row row-cols-2 justify-content-between">
                                    <div name="combatPoints" class="col">
                                        <span class="text-nowrap">@(item.CombatPoint?.ToString() ?? "?") CP</span>
                                        @if (item is {CombatPoint: > 0})
                                        {
                                            <div>(~@(item.CombatPoint / item.Object.Price.Quantity.ToInt(1)) CP/
                                                <img
                                                    alt="Gold"
                                                    src="@(HostEnvironment.BaseAddress)icons/FungibleAssetValue/NCG.png"
                                                    style="width: 16px;"/>)
                                            </div>
                                        }
                                    </div>
                                    <div name="crystals" class="col flex-grow-1">
                                                    <span class="text-nowrap">
                                                        @(item.Crystal?.ToString() ?? "?")
                                                        <img alt="Crystal"
                                                             src="@(HostEnvironment.BaseAddress)icons/FungibleAssetValue/CRYSTAL.png"
                                                             style="width: 16px;"/>
                                                    </span>
                                        @if (item is {Crystal: > 0})
                                        {
                                            <div>(@item.CrystalPerPrice
                                                <img alt="Crystal"
                                                     src="@(HostEnvironment.BaseAddress)icons/FungibleAssetValue/CRYSTAL.png"
                                                     style="width: 16px;"/>/
                                                <img
                                                    alt="NCG"
                                                    src="@(HostEnvironment.BaseAddress)icons/FungibleAssetValue/NCG.png"
                                                    style="width: 16px;"/>)
                                            </div>
                                        }
                                    </div>

                                    @if (!string.IsNullOrEmpty(item.Object.SellerAgentAddress))
                                    {
                                        <div name="seller" class="text-nowrap">
                                            <b>Seller:</b> @(item.Object.SellerAgentAddress[..8])
                                        </div>
                                    }
                                </div>
                                <div class="accordion accordion-flush">
                                    <div class="accordion-item">
                                        <h2 class="accordion-header">
                                            <button class="accordion-button btn-sm collapsed" type="button"
                                                    data-bs-toggle="collapse"
                                                    data-bs-target="#collapse-@item.Object.ProductId"
                                                    aria-expanded="false"
                                                    aria-controls="collapse-@item.Object.ProductId">
                                                Details
                                            </button>
                                        </h2>

                                        <div class="collapse" id="collapse-@item.Object.ProductId">
                                            <div>
                                                <ItemDetails Item="item"/>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }

                </div>
            }
        }
    }
    else
    {
        <p>This item type isn't implemented yet..</p>
    }
    <div id="pager-bottom" class="d-flex justify-content-between sticky-bottom bg-body">
        <button class="btn btn-primary @DisabledClass" @onclick="OnClickBack">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor"
                 class="bi bi-arrow-left" viewBox="0 0 16 16">
                <path fill-rule="evenodd"
                      d="M15 8a.5.5 0 0 0-.5-.5H2.707l3.147-3.146a.5.5 0 1 0-.708-.708l-4 4a.5.5 0 0 0 0 .708l4 4a.5.5 0 0 0 .708-.708L2.707 8.5H14.5A.5.5 0 0 0 15 8"/>
            </svg>
        </button>
        <div class="align-content-center">
            Page @(_currentPageIndex + 1)
        </div>
        <button class="btn btn-primary" @onclick="OnClickNext">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor"
                 class="bi bi-arrow-right" viewBox="0 0 16 16">
                <path fill-rule="evenodd"
                      d="M1 8a.5.5 0 0 1 .5-.5h11.793l-3.147-3.146a.5.5 0 0 1 .708-.708l4 4a.5.5 0 0 1 0 .708l-4 4a.5.5 0 0 1-.708-.708L13.293 8.5H1.5A.5.5 0 0 1 1 8"/>
            </svg>
        </button>
    </div>
</div>

@code {
    [Parameter] public ItemSubType SubType { get; set; } = ItemSubType.Armor;
    [Parameter] public ProductSortBy SortBy { get; set; } = ProductSortBy.CP;
    [Parameter] public SortDirection SortDirection { get; set; } = SortDirection.DESCENDING;
    [Parameter] public string Planet { get; set; } = "heimdall";
    [Parameter] public string? AvatarAddress { get; set; }
    [Parameter] public bool Loading { get; set; }
    [Parameter] public EventCallback<bool> LoadingChanged { get; set; }
    [Parameter] public IMarketService? MarketService { get; set; }
    [Parameter] public string? Search { get; set; }

    private const int Take = 12;
    private int _currentPageIndex;
    private int Skip => Take * _currentPageIndex;
    private IEnumerable<int>? _itemIds = [];
    private IReadOnlyList<ProductItem>? _itemProducts;
    private string DisabledClass => _currentPageIndex == 0 ? "disabled" : "";

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        parameters.SetParameterProperties(this);
        await InitAsync();
        await base.SetParametersAsync(ParameterView.Empty);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JsRuntime.InvokeVoidAsync("window.helper.withContext.registerViewportChangeCallback", DotNetObjectReference.Create(this));
        }
        
        if(!Loading || MarketService is null) return;
        
        if (AvatarAddress is null)
        {
            _itemProducts = await MarketService.GetItemProductsAsync(Planet, Skip, Take, SubType, SortBy, SortDirection, _itemIds);
        }
        else
        {
            _itemProducts = await MarketService.GetProductsByAvatarAsync(Planet, Skip, Take, SubType, SortBy, SortDirection, AvatarAddress, _itemIds);
        }
        await UpdateLoadingState(false);
    }

    private async Task UpdateLoadingState(bool state)
    {
        Loading = state;
        await LoadingChanged.InvokeAsync(state);
    }

    private async Task InitAsync()
    {
        await ItemNameService.InitAsync();

        if (string.IsNullOrWhiteSpace(Search) || Search.Length < 3)
        {
            _itemIds = null;
            return;
        }
        
        _itemIds = ItemNameService
            .Where(x => x.Value.Contains(Search, StringComparison.OrdinalIgnoreCase))
            .Select(x=>x.Key)
            .ToArray();
    }

    private string? GetItemName(ProductItem productItem)
    {
        return ItemNameService.GetValueOrDefault(productItem.Object.Equipment.Id);
    }

    private async Task OnClickNext()
    {
        _currentPageIndex++;
        await UpdateLoadingState(true);
        NavigationManager.NavigateTo(NavigationManager.Uri);
    }

    private async Task OnClickBack()
    {
        _currentPageIndex--;
        await UpdateLoadingState(true);
        await LoadingChanged.InvokeAsync(Loading);
        NavigationManager.NavigateTo(NavigationManager.Uri);
    }

}